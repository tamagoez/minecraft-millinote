# This is a basic workflow to help you get started with Actions

name: Clone & Replace Tag & Push

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  schedule:
    - cron: '*/15 * * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      skip_ci: ${{ steps.push_deal.outputs.skip_ci }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Status
        run: |
          ls -XlR
      - name: Delete all mdx files
        run: |
          rm -fv ./pages/*.mdx
      - name: Clone
        run: |
          mkdir arrange
          rm -rfv ./clone
          mkdir clone
          git clone https://github.com/ripenote/docs-minecraft-ripenote.git clone
          rm -rfv ./clone/.github
          rm -fv ./clone/README.md
          rm -fv ./clone/LICENSE.md
          rm -fv ./clone/.gitignore
          cp -fvr ./clone/* ./arrange/
          rm -rfv ./clone
      - name: Copy all mdx files
        run: |
          cp -fpvr ./arrange/* ./pages/
      - name: Delete
        run: rm -rf ./arrange
      - name: Push
        continue-on-error: true
        id: push_deal
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull
          git add -A
          git commit -m "[deploy] Push replaced pages"
          git push
          RETURN_CODE=$?
          if [ RETURN_CODE = 0 ]; then
            echo "::set-output name=skip_ci::false"
          else
            echo "::set-output name=skip_ci::true"
          fi
  skipcheck:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.skip_ci != 'true' }}
    steps:
      - run: echo "Pushed"
